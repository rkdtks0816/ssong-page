import { Post } from ".";

const post: Post = {
  title: `공부 순서`,
  tag: `#프론트엔드 #백엔드 #임베디드`,
  content: `
    ### 1. **프로그래밍 언어 기초**
       1.1 **C/C++**  
       - 포인터와 참조, 메모리 주소 다루기  
       - 동적 메모리 할당 및 해제 (\`malloc\`, \`free\`, \`new\`, \`delete\`)  
       - 구조체와 클래스의 차이, 객체 지향 프로그래밍(OOP) 기본 개념  
       - 함수 포인터와 콜백 함수  
       - 비트 연산, 비트 필드  
       - STL(표준 템플릿 라이브러리)의 사용: 벡터, 리스트, 맵, 세트 등  
       
       1.2 **JavaScript**  
       - 기본 문법: 변수 선언, 조건문, 반복문  
       - 스코프와 클로저 개념  
       - 비동기 처리: 콜백, Promise, \`async\`/\`await\`  
       - 이벤트 루프와 태스크 큐  
       - 함수형 프로그래밍: 고차 함수, 화살표 함수  
       - DOM(Document Object Model) 조작: 이벤트 핸들링, DOM API 활용  
       - JavaScript 객체와 프로토타입 상속
    
    ### 2. **자료구조와 알고리즘**
       2.1 **자료구조**  
       - 배열과 연결 리스트: 동적 배열, 이중 연결 리스트  
       - 스택과 큐: LIFO, FIFO 개념 및 구현  
       - 해시 테이블: 충돌 해결 방법(체이닝, 오픈 어드레싱)  
       - 트리: 이진 트리, 이진 탐색 트리, AVL 트리, 힙(Heap)  
       - 그래프: 인접 리스트, 인접 행렬 표현, DFS, BFS, 최단 경로 알고리즘(Dijkstra, Floyd-Warshall)
    
       2.2 **알고리즘**  
       - 정렬 알고리즘: 버블, 선택, 삽입, 퀵, 병합 정렬, 힙 정렬의 구현과 시간 복잡도  
       - 탐색 알고리즘: 선형 탐색, 이진 탐색  
       - 재귀와 백트래킹: 재귀 호출의 이해, 문제 해결 전략(예: N-Queen, 미로 탐색)  
       - 동적 프로그래밍(DP): 메모이제이션, 최적 부분 구조(예: 피보나치, 배낭 문제)  
       - 그리디 알고리즘: 탐욕적 선택, 최적해 도출(예: 최소 신장 트리, 다익스트라)  
       - 분할 정복: 퀵 정렬, 병합 정렬 등에서 사용되는 문제 해결 방법
    
    ### 3. **웹 개발 기초**
       3.1 **HTML/CSS**  
       - HTML 태그 구조 및 시맨틱 태그  
       - CSS 박스 모델: margin, padding, border  
       - Flexbox와 Grid 레이아웃  
       - 반응형 디자인: 미디어 쿼리  
       - CSS 애니메이션 및 전환 효과  
    
       3.2 **JavaScript(프론트엔드)**  
       - DOM 조작 및 이벤트 처리: \`addEventListener\`, 이벤트 버블링/캡처링  
       - 브라우저 저장소: LocalStorage, SessionStorage, 쿠키 관리  
       - Ajax 및 Fetch API: 서버와 비동기 통신, JSON 처리  
       - ES6+ 기능: 화살표 함수, 디스트럭처링, 템플릿 리터럴, 클래스  
       - 프론트엔드 상태 관리: 클로저, 모듈 패턴  
    
       3.3 **React.js/Vue.js**  
       - 컴포넌트 기반 개발: 상태(state)와 속성(props)의 개념  
       - React 훅(Hooks): \`useState\`, \`useEffect\`, \`useContext\`  
       - 라우팅: React Router 또는 Vue Router로 페이지 전환 처리  
       - 상태 관리 라이브러리: Redux, Vuex의 동작 원리 및 활용  
       - 컴포넌트 생명주기 및 데이터 흐름 이해
    
    ### 4. **백엔드 및 데이터베이스**
       4.1 **Node.js/Express.js 또는 Django**  
       - 서버 설정 및 라우팅 처리  
       - 미들웨어의 역할과 활용: 인증, 로깅, 오류 처리  
       - RESTful API 설계: CRUD 동작, 경로 설계, 쿼리 파라미터와 바디 데이터 처리  
       - 비동기 처리: 비동기 함수와 데이터베이스 연동  
    
       4.2 **RESTful API 설계**  
       - HTTP 메소드(GET, POST, PUT, DELETE)의 의미와 활용  
       - API 응답 형식(JSON, XML), 상태 코드(200, 400, 404, 500 등)  
       - 인증 방식: JWT(Json Web Token), OAuth 2.0  
       - REST API의 버전 관리와 문서화(Swagger 사용)  
    
       4.3 **SQL 및 NoSQL(MongoDB)**  
       - 기본 SQL 쿼리 작성: SELECT, INSERT, UPDATE, DELETE  
       - JOIN, 서브쿼리, 집계 함수(GROUP BY, COUNT 등)  
       - 데이터베이스 정규화와 비정규화  
       - 인덱스의 개념 및 성능 최적화  
       - NoSQL(MongoDB) 기초: 컬렉션, 도큐먼트, Mongoose ORM 사용법
    
    ### 5. **임베디드 시스템 기초**
       5.1 **RTOS(Real-Time Operating System)**  
       - RTOS의 개념과 실시간 태스크 스케줄링  
       - 스레드 동기화: 뮤텍스, 세마포어, 큐  
       - 인터럽트 처리 및 ISR(Interrupt Service Routine) 개념  
    
       5.2 **마이크로컨트롤러(MCU)**  
       - 마이크로컨트롤러의 구조 및 동작 원리  
       - 통신 프로토콜(UART, I2C, SPI)의 이해와 구현  
       - GPIO 제어 및 센서 인터페이스  
    
       5.3 **펌웨어 개발**  
       - 하드웨어 초기화 및 메모리 맵 구성  
       - 드라이버 작성 및 인터럽트 처리  
       - 펌웨어 업데이트 방법과 보안 처리
    
    ### 6. **네트워크와 운영체제**
       6.1 **네트워크 기본**  
       - OSI 7계층 모델과 각 계층의 역할  
       - TCP/IP, UDP 프로토콜의 차이  
       - HTTP/HTTPS의 차이점과 SSL/TLS 보안 프로토콜  
       - DNS의 동작 원리 및 라우팅 기본 개념
    
       6.2 **운영체제**  
       - 프로세스와 스레드의 차이점  
       - 멀티스레딩, 동기화 문제(뮤텍스, 세마포어)  
       - 메모리 관리: 페이징, 세그멘테이션, 가상 메모리  
       - 파일 시스템의 기본 개념 및 디스크 스케줄링
    
    ### 7. **버전 관리 및 협업 도구**
       7.1 **Git**  
       - \`clone\`, \`branch\`, \`commit\`, \`merge\`, \`pull\`, \`push\` 등 기본 명령어  
       - Git 브랜치 전략: Git Flow, GitHub Flow  
       - 협업을 위한 Pull Request(PR)와 코드 리뷰 절차  
    
       7.2 **CI/CD 도구**  
       - Jenkins를 이용한 자동 빌드 및 테스트 설정  
       - Docker를 이용한 컨테이너화 및 배포 자동화  
       - Kubernetes를 이용한 컨테이너 오케스트레이션
    
    ### 8. **시스템 설계**
       8.1 **확장성 및 성능 최적화**  
       - 데이터베이스 샤딩과 레플리케이션  
       - 캐싱을 통한 성능 최적화(Redis, Memcached)  
       - 부하 분산: 로드 밸런서의 개념과 사용법  
    
       8.2 **RESTful API 설계 및 마이크로서비스 아키텍처**  
       - 마이크로서비스의 개념과 모놀리식 아키텍처와의 차이  
       - 서비스 간 통신(gRPC, RabbitMQ)  
       - API 게이트웨이의 역할 및 구현 방법
    
    ### 9. **임베디드 및 웹 관련 프로젝트**
       9.1 **웹 개발 프로젝트**  
       - 프론트엔드와 백엔드를 통합한 풀스택 웹 애플리케이션 개발  
       - 실시간 데이터 처리 및 웹 소켓(WebSocket) 사용 사례  
       - 데이터베이스 설계 및 RESTful API 구축 경험  
    
       9.2 **임베디드 시스템 프로젝트**  
       - 센서를 활용한 IoT 디바이스 개발  
       - 마이크로컨트롤러를 이용한 하드웨어 제어 프로젝트  
       - 실시간 운영체제를 활용한 태스크 관리 프로젝트
  `,
};

export default post;
